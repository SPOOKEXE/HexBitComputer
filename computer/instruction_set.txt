
[[INSTRUCTION OP-CODES]]
(23 instructions, 5 bit header for 32 max)

00000 | NO-OP
00001 | HALT
00010 | FLUSH
00011 | LOAD <addr> <r-addr>
00100 | STORE <r-addr> <addr>
00101 | MOVEREG <r-addr> <r-addr>
00110 | MOVEMEM <addr> <addr>
00111 | COPYREG <r-addr> <r-addr>
01000 | COPYMEM <addr> <addr>

01001 | JMP <offset>
01010 | JMP-IF-ZERO <offset>
01011 | JMP-IF-NOT-ZERO <offset>

01100 | OUTPUT <addr>
01101 | INPUT <addr>
01110 | WRITE <addr> <value>

10000 | ADD  <r-addr> <r-addr> <r-addr>
10001 | SUB <r-addr> <r-addr> <r-addr>
10010 | MULT <r-addr> <r-addr> <r-addr>
10011 | DIV <r-addr> <r-addr> <r-addr>
10100 | MOD <r-addr> <r-addr> <r-addr>
10101 | COMPTR <r-addr> <r-addr> <r-addr>
10110 | XOR <r-addr> <r-addr> <r-addr>
10111 | SHIFT-U <r-addr>
11000 | SHIFT-D <r-addr>
11001 | ROLL-L <r-addr>
11010 | ROLL-R <r-addr>

[[INSTRUCTION DESCRIPTIONS]]

NO-OP >> No operation
HALT >> Halt the running application
FLUSH >> Clear all the (application) registers
LOAD >> Load the value at the memory address to @R0
STORE >> Store the value in @R0 to the memory address
MOVEREG >> Move register value to another register
MOVEMEM >> Move memory address value to another address
COPYREG >> Copy register value to another register
COPYMEM >> Copy memory value to another register

JMP >> Jump to the given instruction (offset from LINE 0)
JMP-IF-ZERO >> Jump to the instruction if @R0 is 0
JMP-IF-NOT-ZERO >> Jump to the instruction if @R0 is NOT 0

OUTPUT >> Output a memory address's value to the a-bus pins
INPUT >> Intake a value from the a-bus pins and put it in the memory address
WRITE >> Write a value to the target address

ADD >> Add @R0 and @R1 and output to @R2
SUB >> Subtract @R0 and @R1 and output to @R2
MULT >> Multiply @R0 and @R1 and output to @R2
DIV >> Divide @R0 and @R1 and output to @R2
MOD >> Modulus; use remainder of DIV of MOD N, IF NEGATIVE, SUBTRACT REMAINDER FROM N
COMPTR >> COMPARATOR operation
XOR >> Exclusive-OR operation (XOR)
SHIFT-U >> Shift bits left (far left is LOST, 0 appended to far right)
SHIFT-D >> Shift bits right (far right is LOST, 0 appended to left)
ROLL-L >> Shift bits left (far left is moved to far right)
ROLL-R >> Shift bits right (far right is moved to far left)

[INSTRUCTION STRUCTURE - 32 BIT INSTRUCTION]

00000 000 0000000000000000000000000

5 BITS FOR INSTRUCTION
3 BITS FOR SPECIAL
24 BITS FOR DATA

[[INSTRUCTION STRUCTURE - 8HEX]]

8 BITS FOR INSTRUCTION & SPECIAL
24 BITS FOR DATA

2 HEX CHARACTERS = 8 BITS
6 HEX CHARACTERS = 24 BITS

FF^FFFFFF = 1111,1111^1111,1111,1111,1111,1111,1111,1111,1111

[[RESERVED MEMORY - 12BIT ADDR]]

000000000000 = NULL / 0
000000000001 = R0 (STORE ARGUMENTS)
000000000010 = R1 (STORE ARGUMENTS)
000000000011 = R2 (STORE ARGUMENTS)
000000000100 = R3 (STORE RESULTS)
000000000101 = R4 (STORE RESULTS)
000000000110 = R5 (STORE RESULTS)
000000000111 = RESERVED
...
000000011111 = RESERVED
000000100000 = FREE (6th bit becomes 1)
000000100001 = FREE
000000100011 = FREE
000000100100 = FREE
...
111111111111 = FREE
